*tdo.txt*           For Neovim >= 0.8.0          Last change: 2025 February 22

==============================================================================
Table of Contents                                      *tdo-table-of-contents*

  - Features                                                    |tdo-features|
  - Setup                                                          |tdo-setup|
  - Usage                                                          |tdo-usage|
  - What’s Next                                          |tdo-what’s-next|
  - ‍ Behind The Code                              |tdo-‍-behind-the-code|

tdo.nvim integrates tdo <https://github.com/2kabhishek/tdo> into your neovim
workflow to make managing notes and todos super simple and fast. Demo video
<https://youtu.be/N4IRT7M-RLg>


FEATURES                                                        *tdo-features*

- All features provided by tdo <https://github.com/2kabhishek/tdo?tab=readme-ov-file#-features>
- Various commands to make working with tdo seamless
- Todo navigation and toggle helpers
- Fuzzy autocompletion for notes navigation
- Integration with telescope for easy notes searching


SETUP                                                              *tdo-setup*


REQUIREMENTS ~

- Neovim
- tdo <https://github.com/2kabhishek/tdo>
- telescope.nvim


INSTALLATION ~

Add the following to your lazy/packer config

>lua
        -- Lazy
        {
            '2kabhishek/tdo.nvim',
            dependencies =  'nvim-telescope/telescope.nvim',
            cmd = { 'Tdo', 'TdoEntry', 'TdoNote', 'TdoTodos', 'TdoToggle', 'TdoFind', 'TdoFiles' },
            keys = { '[t', ']t' },
        },
    
        -- Packer
        use '2kabhishek/tdo.nvim'
<


USAGE                                                              *tdo-usage*


COMMANDS ~

`tdo.nvim` adds the following commands:

- `Tdo <args>`open today’s todo when no `args`, accepts `args` same as tdo <https://github.com/2kabhishek/tdo?tab=readme-ov-file#-usage>
    - Supports tab completion for file paths and fuzzy matching
- `TdoEntry <offset>`open today’s journal entry, accepts `offset`
- `TdoNote`create new note with title, if left empty creates a draft with current timestamp
- `TdoTodos`show all your incomplete todos
- `TdoToggle`toggle todo state
- `TdoFind <text>`interactively search for `text` in all your notes
- `TdoFiles`review all your notes


MAPPINGS ~

`tdo.nvim` adds the following mappings:

- [t / ]t — Go to previous/next todo `[ ]`


RECOMMENDED WHICH-KEY MAPPINGS

Other than the standard commands, you can use which-key to create your own
commands.

I have defined commands for yesterday/tomorrow’s todos, commit note and
timestamp insertion.

>lua
        n = {
            name = 'Notes',
            d = { '<cmd>Tdo<cr>', "Today's Todo" },
            e = { '<cmd>TdoEntry<cr>', "Today's Entry" },
            f = { '<cmd>TdoFiles<cr>', 'All Notes' },
            g = { '<cmd>TdoFind<cr>', 'Find Notes' },
            h = { '<cmd>Tdo -1<cr>', "Yesterday's Todo" },
            j = { "<cmd>put =strftime('%a %d %b %r')<cr>", 'Insert Human Date' },
            J = { "<cmd>put =strftime('%F')<cr>", 'Insert Date' },
            k = { "<cmd>put =strftime('%r')<cr>", 'Insert Human Time' },
            K = { "<cmd>put =strftime('%F-%H-%M')<cr>", 'Insert Time' },
            l = { '<cmd>Tdo 1<cr>', "Tomorrow's Todo" },
            n = { '<cmd>TdoNote<cr>', 'New Note' },
            s = { '<cmd>lua require("tdo").run_with("commit " .. vim.fn.expand("%:p")) vim.notify("Commited!")<cr>', 'Commit Note', },
            t = { '<cmd>TdoTodos<cr>', 'Incomplete Todos' },
            x = { '<cmd>TdoToggle<cr>', 'Toggle Todo' },
            -- These bindings can go from 1 till 9
            ['2'] = { "Tdo 2", 'Todo 2 Days In Future' },
            p = {
                ['2'] = { "Tdo -2", 'Todo 2 Days In Past' },
            },
    
    
        },
<


WHAT’S NEXT                                              *tdo-what’s-next*

You tell me!


‍ BEHIND THE CODE                                  *tdo-‍-behind-the-code*


INSPIRATION ~

Most note-taking systems offer a lot more than I needed, so I wrote tdo
<https://github.com/2kabhishek/tdo> and then tdo.nvim for better integration.


CHALLENGES/LEARNINGS ~

- Dove deeper into nvim APIs
- Learned about not interactive shell scripting.


TOOLING ~

- dots2k <https://github.com/2kabhishek/dots2k> — Dev Environment
- nvim2k <https://github.com/2kabhishek/nvim2k> — Personalized Editor
- sway2k <https://github.com/2kabhishek/sway2k> — Desktop Environment
- qute2k <https://github.com/2kabhishek/qute2k> — Personalized Browser


MORE INFO ~

- co-author.nvim <https://github.com/2kabhishek/co-author.nvim> — Easily add git co authors
- nerdy.nvim <https://github.com/2kabhishek/nerdy.nvim> — Easily add nerd glyphs


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
